import logging
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import requests
import json
import re

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove

import request

markup = InlineKeyboardMarkup()

url = "https://api.telegram.org/bot5346235377:AAGg1mWc4FPRxGn1GFcnOBcj75MMLlrAJlA/sendMessage"

host_url = 'http://127.0.0.1:8000/'

headers = {
    "Accept": "application/json",
    "Content-Type": "application/json",
    "User-Agent": "PostmanRuntime/7.29.0",
    "Cookie": "csrftoken=XqYL4yFIf9Z7Ufe6nB6fg90TllF1OayZrJgebZFjjcdbY1q2rGVqiBIO7Ua82nD6",
    "Accept": "*/*",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive"
}


class FSMAdmin(StatesGroup):
    username = State()
    password = State()
    password2 = State()
    age = State()
    email = State()
    tg = State()


class FSMNewsletters(StatesGroup):
    text = State()


a = {}
API_TOKEN = '5346235377:AAGg1mWc4FPRxGn1GFcnOBcj75MMLlrAJlA'

storage = MemoryStorage()
# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)


def authuser(tgid):
    rer = requests.get(f'{host_url}api/v1/accountlist/').json()
    rdr = [f"{i['tg']}" for i in rer]
    if str(tgid) in rdr:
        return True
    else:
        return False


def authadmin(tgid):
    rer = requests.get(f'{host_url}api/v1/superaccountlist/').json()
    rdr = [f"{i['tg']}" for i in rer]
    if str(tgid) in rdr:
        return True
    else:
        return False


def postreg(asd):
    response = requests.post(f'{host_url}api/v1/register/', json=asd, headers=headers)
    if str(response.ok) == 'False':
        return str(response.text)
    else:
        return 'OK'


@dp.message_handler(commands=['newsletter'], state=None)
async def cm_start(message: types.Message):
    rer = requests.get(f'{host_url}/api/v1/superaccountlist/').json()
    print(message.from_user.id)
    rdr = [i['tg'] for i in rer]
    print(rdr)
    if str(message.from_user.id) in rdr:
        await FSMNewsletters.text.set()
        await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º')
    else:
        await message.reply('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')


@dp.message_handler(state=FSMNewsletters.text)
async def load_username(message: types.Message, state: FSMContext):
    rer = requests.get(f'{host_url}api/v1/accountlist/').json()
    rdr = [f"{i['tg']}" for i in rer]
    print(rdr)
    try:
        for i in rdr:
            response = requests.post(url, json={"text": message.text, "chat_id": i}, headers=headers)
    except:
        await message.reply('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    await state.finish()
    await message.answer('–í—Å–µ –æ–∫')


@dp.message_handler(commands=['register'], state=None)
async def register(message: types.Message):
    rer = requests.get(f'{host_url}api/v1/accountlist/').json()
    rdr = [i['username_tg'] for i in rer]
    rdr2 = [i['tg'] for i in rer]
    print(rer)
    if str(message.from_user.id) in rdr2:
        await message.reply('–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
    elif len(str(message.chat.id)) <= 11:
        await FSMAdmin.username.set()
        await message.reply('–ù–∞—á–∞–ª–∞—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π username')
    else:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä—Ü–∏—é')


@dp.message_handler(state=FSMAdmin.username)
async def load_username(message: types.Message, state: FSMContext):
    rer = requests.get(f'{host_url}api/v1/accountlist/').json()
    rdr = [i['username'] for i in rer]
    print(rdr)
    if message.text not in rdr:
        async with state.proxy() as data:
            data['username'] = message.text
        await FSMAdmin.next()
        await message.reply('–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å')
    else:
        await message.reply('–¢–∞–∫–æ–π –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –µ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π')


@dp.message_handler(state=FSMAdmin.password)
async def load_password(message: types.Message, state: FSMContext):
    if len(message.text) >= 6:
        async with state.proxy() as data:
            data['password'] = message.text
            if message.chat.username == '':
                data['username_tg'] = 'None'
            else:
                data['username_tg'] = '@' + str(message.chat.username)
        await FSMAdmin.next()
        await message.reply('–ü–æ–≤—Ç–æ—Ä–∏ –ø–∞—Ä–æ–ª—å')
    else:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å')


@dp.message_handler(state=FSMAdmin.password2)
async def load_password2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == data['password']:
            data['password2'] = message.text
            data['tg'] = str(message.chat.id)
            data['last_name'] = str(message.chat.last_name)
            data['first_name'] = str(message.chat.first_name)
            await message.reply('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? üí´')
            await FSMAdmin.next()
        else:
            await message.reply('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å—Ö–æ–∂–∏, –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')


@dp.message_handler(state=FSMAdmin.age)
async def load_password2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['age'] = message.text
    await message.reply('–í–≤–µ–¥–∏ —Å–≤–æ—é –ø–æ—á—Ç—É')
    await FSMAdmin.next()


@dp.message_handler(state=FSMAdmin.email)
async def load_email(message: types.Message, state: FSMContext):
    regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

    if re.fullmatch(regex, message.text):
        async with state.proxy() as data:
            data['email'] = message.text
            asd = dict(data)
            print(asd)
        await state.finish()
        await message.reply('–û–∂–∏–¥–∞–π—Ç–µ')
        await message.reply(str(postreg(asd)))
    else:
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email')


@dp.message_handler(commands=['application'])
async def course_detail(message: types.Message, id):
    print(True)
    markup = InlineKeyboardMarkup(row_width=2)
    courses = requests.get(f'{host_url}api/v1/courselist/').json()
    for i in courses:
        if i['id'] == id:
            print('DAstan')
            course = i
            break
        else:
            course = 'no'

    inline_btn_1 = InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è üì©', callback_data=f'create-{id}')
    markup.add(inline_btn_1)
    inline_btn_1 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üö´', callback_data=f'courses')
    markup.add(inline_btn_1)
    print(message)
    if authadmin(message.chat.id):
        inline_btn_1 = InlineKeyboardButton('–ì—Ä—É–ø–ø—ã', callback_data=f'groups-{id}')
        markup.add(inline_btn_1)
    try:
        await message.answer_photo(photo=f'{course["image"]}', caption=f'{course["title"]}\n{course["description"]}\n–ö—É—Ä—Å –¥–ª–∏—Ç—å—Å—è {course["duration"]}\n–ö–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ {course["hour"]} —á–∞—Å–∞\n–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –ø–æ {course["price"]}', reply_markup=markup)
    except:
        await message.answer(f'{course["title"]}\n{course["description"]}\n–ö—É—Ä—Å –¥–ª–∏—Ç—å—Å—è {course["duration"]}\n–ö–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ {course["hour"]} —á–∞—Å–∞\n–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –ø–æ {course["price"]}', reply_markup=markup)


@dp.message_handler(commands=['meeting'])
async def meet_detail(message: types.Message, id):
    markup = InlineKeyboardMarkup(row_width=2)
    meeting = requests.get(f'{host_url}api/v1/meetslist/').json()
    print(meeting)
    for i in meeting:
        if i['id'] == id:
            meeting_detail = i
            break
        else:
            meet_detail = 'no'
    print(id)
    print(message)
    if authadmin(message['chat']['id']):
        inline_btn_1 = InlineKeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏', callback_data=f'applicationmet-{id}')
        markup.add(inline_btn_1)
    inline_btn_1 = InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è üì©', callback_data=f'createmet{id}')
    markup.add(inline_btn_1)
    inline_btn_1 = InlineKeyboardButton('–ù–∞–∑–∞–¥ üö´', callback_data=f'meeting')
    markup.add(inline_btn_1)
    try:
        await message.answer_photo(photo=f'{meeting_detail["image"]}', caption=f'{meeting_detail["title"]}\n{meeting_detail["description"]}\n', reply_markup=markup)
    except:
        await message.answer(f'{meeting_detail["title"]}\n{meeting_detail["description"]}\n', reply_markup=markup)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    markup = InlineKeyboardMarkup(row_width=2)
    if authuser(message.from_user.id):
        inline_btn_1 = InlineKeyboardButton('–ö—É—Ä—Å—ã üíª', callback_data='courses')
        inline_btn_2 = InlineKeyboardButton('üéä –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üéä', callback_data='meeting')
        markup.add(inline_btn_1)

        markup.add(inline_btn_2)
        await message.answer(
            '''–ü—Ä–∏–≤–µ—Çüëã, –Ø –ó–∏ 
A—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Zetroomüí°
–Ø –ø–æ–º–æ–≥—É –∫–∞–∫ —Ç—É—Ç –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ
–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—É—Ä—Å—ã —Ç–æ –Ω–∞–∂–º–∏ \n"–ö—É—Ä—Å—ã üíª"
–ê –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Ç–æ –Ω–∞–∂–º–∏ \n"üéä –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üéä"''', reply_markup=markup)
    else:
        inline_btn_1 = InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üì≤', callback_data='register')
        markup.add(inline_btn_1)
        await message.answer('–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ó–∏, —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –∫–æ–º–ø–∞–Ω–∏—é ZetRoomüí°\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω—É–∂–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üì≤"', reply_markup=markup)


@dp.message_handler(commands=['admin'])
async def admin_welcome(message: types.Message):
    markup = InlineKeyboardMarkup(row_width=2)
    if authadmin(message.from_user.id):
        print(message)
        inline_btn_1 = InlineKeyboardButton('–ö—É—Ä—Å—ã', callback_data='courses')
        markup.add(inline_btn_1)
        inline_btn_1 = InlineKeyboardButton('–ó–∞—è–≤–∫–∏', callback_data='applicationlist')
        markup.add(inline_btn_1)
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é –ê–¥–º–∏–Ω", reply_markup=markup)
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω')


@dp.message_handler(commands=['dastan'])
async def accept(message: types.Message, data):
    await message.delete()
    markup = InlineKeyboardMarkup(row_width=2)
    print(data)
    markup.add(InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å ‚úÖ', callback_data=f'acceptapplication-{data["id"]}'))
    markup.add(InlineKeyboardButton('–û—Ç–∫–∞–∑ üö´', callback_data=f'Ignore-{data["id"]}'))
    await message.answer(f'{data["account"]["username"]}, {data["account"]["username_tg"]}\n{data["course"]["title"]}',
                         reply_markup=markup)


@dp.message_handler()
async def accept(message: types.Message):
    print(message.text)
    if message.text == 'ZetRoom':
        await bot.send_sticker(chat_id=message.chat.id, sticker='CAACAgIAAxkBAAEFUjFi1-ZJ87hEAozUIuD8HnKkuFnfswACY2kAAuCjggfNiOgW_zbDYikE')
        await message.reply(text='–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø–∞—Å—Ö–∞–ª–∫—Éü•≥ü•≥')


@dp.callback_query_handler()
async def process_callback(call: types.CallbackQuery):
    print(call.data)
    courses = requests.get(f'{host_url}api/v1/courselist/').json()
    meetings = requests.get(f'{host_url}api/v1/meetslist/').json()
    if call.data == 'register':
        await register(message=call.message)
    if call.data == 'courses':
        print(call.message)
        markup = InlineKeyboardMarkup(row_width=2)

        markup.clean()
        for i in courses:
            inline_btn_1 = InlineKeyboardButton(i['title'], callback_data=i['id'])
            markup.add(inline_btn_1)
        await bot.send_message(chat_id=call.from_user.id, text='–í—Å–µ –Ω–∞—à–∏ –∫—É—Ä—Å—ã', reply_markup=markup)
    if 'groups' in call.data:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        rer = requests.get(f'{host_url}api/v1/grouplistbot').json()
        print(call.data)
        markup = InlineKeyboardMarkup()
        markup.clean()
        group = {}
        for i in rer:
            if str(i['id']) == call.data.split('-')[-1]:
                inline_btn_1 = InlineKeyboardButton(i['title'], callback_data=f'groupdetail-{i["id"]}')
                markup.add(inline_btn_1)
        await bot.send_message(chat_id=call.from_user.id, text='–ì—Ä—É–ø–ø—ã', reply_markup=markup)
    if 'groupdetail' in call.data:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        rer = requests.get(f'{host_url}api/v1/grouplist').json()
        markup = InlineKeyboardMarkup(row_width=2)
        for i in rer:
            if call.data.split('-')[-1] == str(i['id']):
                group = i
                break
        for i in group['students']:
            inline_btn_1 = InlineKeyboardButton(i['username'], callback_data=f'student-{i["id"]}')
            markup.add(inline_btn_1)
        await bot.send_message(chat_id=call.from_user.id, text='–°—Ç—É–¥–µ–Ω—Ç—ã', reply_markup=markup)
    if 'applicationmet' in call.data:
        # await bot.delete_message(call.from_user.id, call.message.message_id)
        markup = InlineKeyboardMarkup(row_width=2)
        rer = requests.get(f'{host_url}api/v1/meetapplication?meeting={call.data.split("-")[-1]}').json()
        print(rer)
        for i in rer:
            rar = requests.get(f'{host_url}api/v1/accountlist?id={i["account"]}').json()
            print(rar[0]['username'])
            print(i["account"])
            inline_btn_1 = InlineKeyboardButton(rar[0]['username'], callback_data=f'student-{i["account"]}')
            markup.add(inline_btn_1)
        await bot.send_message(chat_id=call.from_user.id, text='–í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫—É—Ä—Å—ã', reply_markup=markup)
    if call.data == 'meeting':

        markup = InlineKeyboardMarkup(row_width=2)

        markup.clean()
        for i in meetings:
            inline_btn_1 = InlineKeyboardButton(i['title'], callback_data=f"meetdetail-{i['id']}")
            markup.add(inline_btn_1)
        await bot.send_message(chat_id=call.from_user.id, text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', reply_markup=markup)
    if 'meetdetail' in str(call.data):
        for i in meetings:
            if str(call.data).split('-')[-1] == str(i['id']):
                await bot.delete_message(call.from_user.id, call.message.message_id)
                await meet_detail(message=call.message, id=i['id'])
    if str(call.data).isdigit():
        for i in courses:
            if str(call.data) == str(i['id']):
                await bot.delete_message(call.from_user.id, call.message.message_id)
                await course_detail(message=call.message, id=i['id'])
    if 'createmet' in str(call.data):
        for i in meetings:
            if str(call.data) == f'createmet{i["id"]}':
                markup = InlineKeyboardMarkup(row_width=2)
                account = call.from_user.id
                payload = {
                    "account": int(account),
                    "meeting": i['id'],
                }
                print(payload)
                response = requests.post(f'{host_url}api/v1/applicationmeetcreate/', json=payload)
                print(response.ok)
                if response.ok == True:
                    await bot.delete_message(call.from_user.id, call.message.message_id)
                    # inline_btn_1 = InlineKeyboardButton('–î–æ–º–æ–π', callback_data='home')
                    # inline_btn_2 = InlineKeyboardButton('–ö—É—Ä—Å—ã', callback_data='courses')
                    # markup.add(inline_btn_1, inline_btn_2)
                    await bot.answer_callback_query(callback_query_id=call.id,
                                                    text=f'–í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {i["title"]}',
                                                    show_alert=True)
                    # await bot.send_message(text=f'–í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ {i["title"]}', chat_id=call.from_user.id, reply_markup=markup)

                else:
                    await bot.delete_message(call.from_user.id, call.message.message_id)
                    # inline_btn_1 = InlineKeyboardButton('–î–æ–º–æ–π', callback_data='home')
                    # inline_btn_2 = InlineKeyboardButton('–ö—É—Ä—Å—ã', callback_data='courses')
                    # markup.add(inline_btn_1, inline_btn_2)
                    await bot.answer_callback_query(callback_query_id=call.id,
                                                    text='–û—à–∏–±–∫–∞, –ø–æ—Ö–æ–¥—É –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É, –ª–∏–±–æ —Ç—É—Ç –º–æ—è –æ—à–∏–±–∫–∞',
                                                    show_alert=True)
                    # await bot.send_message(text='–û—à–∏–±–∫–∞, –ø–æ—Ö–æ–¥—É –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É, –ª–∏–±–æ —Ç—É—Ç –º–æ—è –æ—à–∏–±–∫–∞', chat_id=call.from_user.id)
    elif 'create' in str(call.data):
        for i in courses:
            print(call.data)
            if str(call.data) == f'create-{i["id"]}':
                markup = InlineKeyboardMarkup(row_width=2)
                print('da')
                print(type(call.from_user.id))
                rer = requests.get(f'{host_url}api/v1/accountlist/').json()
                account = call.from_user.id
                print(rer)
                # for j in rer:
                #     if j['tg'] == call.from_user.id:
                #         account = j['id']

                print(int(account))
                payload = {
                    "account": int(account),
                    "course": i['id'],
                }
                print(payload)
                response = requests.post(f'{host_url}api/v1/applicationcreate/', json=payload)
                print(response.ok)
                if response.ok == True:
                    await bot.delete_message(call.from_user.id, call.message.message_id)
                    # inline_btn_1 = InlineKeyboardButton('–î–æ–º–æ–π', callback_data='home')
                    # inline_btn_2 = InlineKeyboardButton('–ö—É—Ä—Å—ã', callback_data='courses')
                    # markup.add(inline_btn_1, inline_btn_2)
                    await bot.answer_callback_query(callback_query_id=call.id,
                                                    text=f'–í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ {i["title"]}', show_alert=True)
                    # await bot.send_message(text=f'–í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ {i["title"]}', chat_id=call.from_user.id, reply_markup=markup)

                else:
                    await bot.delete_message(call.from_user.id, call.message.message_id)
                    # inline_btn_1 = InlineKeyboardButton('–î–æ–º–æ–π', callback_data='home')
                    # inline_btn_2 = InlineKeyboardButton('–ö—É—Ä—Å—ã', callback_data='courses')
                    # markup.add(inline_btn_1, inline_btn_2)
                    await bot.answer_callback_query(callback_query_id=call.id,
                                                    text='–û—à–∏–±–∫–∞, –ø–æ—Ö–æ–¥—É –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É, –ª–∏–±–æ —Ç—É—Ç –º–æ—è –æ—à–∏–±–∫–∞',
                                                    show_alert=True)
                    # await bot.send_message(text='–û—à–∏–±–∫–∞, –ø–æ—Ö–æ–¥—É –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É, –ª–∏–±–æ —Ç—É—Ç –º–æ—è –æ—à–∏–±–∫–∞', chat_id=call.from_user.id)

    if str(call.data) == 'applicationlist':
        await call.message.delete()
        markup = InlineKeyboardMarkup(row_width=1)
        rer = requests.get(f'{host_url}api/v1/applicationlist/').json()
        for i in rer:
            inline_btn_1 = InlineKeyboardButton(f'{i["account"]["username"]} {i["course"]["title"]}',
                                                callback_data=f"applicationfor-{i['id']}")
            markup.add(inline_btn_1)
        await bot.send_message(text='–ó–∞—è–≤–∫–∏', chat_id=call.from_user.id, reply_markup=markup)
    if call.data == 'home':
        await call.message.delete()
        await send_welcome(message=call.message)
    if 'student' in call.data:
        rer = requests.get(f'{host_url}api/v1/accountlist/?id={call.data.split("-")[-1]}').json()
        if str(rer) != '[]':
            await bot.send_message(chat_id=call.from_user.id, text=rer)
    if 'applicationfor' in call.data:
        rer = requests.get(f'{host_url}api/v1/applicationlist/').json()
        for i in rer:
            if str(i['id']) == str(call.data).split('-')[-1]:
                await accept(message=call.message, data=i)
    if 'acceptapplication' in call.data:
        rer = requests.get(f'{host_url}api/v1/grouplist/').json()
        rar = requests.get(f'{host_url}api/v1/applicationlist/').json()
        for i in rar:
            if str(i["id"]) == call.data.split('-')[-1]:
                print('dasd')
                course = i['course']['id']
                break
        markup = InlineKeyboardMarkup(row_width=2)
        await call.message.delete()
        print(rer)
        print(course)
        for i in rer:
            if course == i['course']:
                print('dastan')
                btn = InlineKeyboardButton(text=f'{i["title"]}',
                                           callback_data=f'addcoursegroup-{i["id"]}-{call.data.split("-")[-1]}')
                markup.add(btn)
        btn = InlineKeyboardButton(text=f'–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É', callback_data=f'addnewcoursegroup')
        markup.add(btn)
        await bot.send_message(text='–í –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É –∂–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?', chat_id=call.from_user.id, reply_markup=markup)
    if 'addnewcoursegroup' == call.data:
        await bot.send_message(text='–ò–∑–≤–∏–Ω–∏—Ç–µ –Ω–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', chat_id=call.from_user.id)
    if 'addcoursegroup' in call.data:
        rar = requests.get(f'{host_url}api/v1/applicationlist/').json()
        for i in rar:
            if str(i["id"]) == call.data.split('-')[-1]:
                application = i
                break
        rer = requests.get(f'{host_url}api/v1/grouplistbot').json()
        print(call.data)
        for i in rer:
            if str(i['id']) == call.data.split('-')[-2]:
                group = i
        await bot.delete_message(call.from_user.id, call.message.message_id)
        print(application)
        if application['account']['id'] not in group['students']:
            group['students'].append(application['account']['id'])
            print(group)
            response = requests.request(method='PUT',
                                        url=f"{host_url}api/v1/groupupdate/{str(call.data.split('-')[-2])}", json=group)
            print(response.text)
            deler = requests.delete(f"{host_url}api/v1/applicationdelete/{application['id']}").json()
            print(deler)
            await bot.send_message(chat_id=application['account']['tg'], text=f'–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É {group["title"]}\n–û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—â–∏—Ö —É–∫–∞–∑–∞–Ω–∏–π ü•≥')
            await bot.answer_callback_query(callback_query_id=call.id,
                                            text='–°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ωü•≥',
                                            show_alert=True)
        deler = requests.delete(f"{host_url}api/v1/applicationdelete/{application['id']}")
        print(deler)
        await bot.answer_callback_query(callback_query_id=call.id,
                                        text='–°—Ç—É–¥–µ–Ω—Ç —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ üòì',
                                        show_alert=True)
        if 'Ignore' in call.data:
            rar = requests.get(f'{host_url}api/v1/applicationlist/').json()
            for i in rar:
                if i["id"] == call.data.split('-')[-1]:
                    application = i
            print(application)
            deler = requests.delete(f"{host_url}api/v1/applicationdelete/{application['id']}")
            print(deler)


# @dp.message_handler()
# async def echo(message: types.Message):
#
#     await message.answer(message.chat.id)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
